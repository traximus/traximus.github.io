<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Storyboard | Traximus‘pages]]></title>
  <link href="http://traximus.github.io/blog/categories/storyboard/atom.xml" rel="self"/>
  <link href="http://traximus.github.io/"/>
  <updated>2014-08-05T10:05:14+08:00</updated>
  <id>http://traximus.github.io/</id>
  <author>
    <name><![CDATA[traximus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[StaticCell &amp;&amp; PrototypeCell]]></title>
    <link href="http://traximus.github.io/blog/2014/07/17/staticcell-and-and-prototypecell/"/>
    <updated>2014-07-17T15:30:05+08:00</updated>
    <id>http://traximus.github.io/blog/2014/07/17/staticcell-and-and-prototypecell</id>
    <content type="html"><![CDATA[<blockquote><h4>这仍然是一篇关于   <code>storyboard</code>的笔记； 在我的项目中<code>TableView</code>使用的还是比较频繁，之前我对于自定义<code>cell</code>，一般都是新建一个<code>xib</code>，或者新建一个<code>customCell</code>类来解决；<!--more-->最近才发现，<code>storyboard</code>里面，可以直接自定义<code>cell</code>，很方便。同时提供两种类型cell， <code>static</code>， <code>prototype</code>; 下面是我关于这两种cell的简单笔记</h4></blockquote>

<hr />

<h2>1. Static Cell</h2>

<h5><code>static cell</code>, 顾名思义，就是静态cell，直接在storyboard中设置好，然后直接加载；无需再设置reuse identifier进行reuse; 当然，你可以在每一个static cell中，按照你的需要，自定义contentView；</h5>

<blockquote><p>PS1: 我这里尝试过给<code>static cell</code>添加<code>reuse identifier</code>,然后进行reuse，结果报错了；</p>

<p>PS2: 我尝试在<code>UIViewController</code>中使用<code>static cell</code>，结果发现，<code>static cell</code>只能在<code>UITableViewController</code>中使用；</p></blockquote>

<h2>2. Prototype Cell</h2>

<h4><code>prototype cell</code>，顾名思义，就是原型cell，这个cell作为一个原型，肯定可以进行reuse，当然也支持在storyboard中直接自定义contentView；</h4>

<blockquote><p>PS： prototype cell在UITableViewController和其他VC中都可以使用，没有static cell的限制；</p></blockquote>

<hr />

<h2>废话少说，我们来个基本的例子，来帮助理解；</h2>

<p><strong>首先，我们的例子app大概是这个样子；</strong></p>

<p><img src="/images/2014-07-17-01.png" alt="summary" /></p>

<p><strong>主要结构很简单，一个基于导航栏的VC，上面3个按钮，分别push到VC1, VC2，VC3</strong></p>

<ul>
<li>VC1 &ndash; 基于UITableViewController的static cell</li>
<li>VC2 &ndash; 基于UITableViewController的prototype cell</li>
<li>VC3 &ndash; 基于UIViewController的prototype cell</li>
</ul>


<h4>1.VC1 &ndash; 基于UITableViewController的static cell</h4>

<ol>
<li><p>我们先添加一个UItableViewController，然后选择static cell</p>

<p><img src="/images/2014-07-17-02.png" alt="summary" /></p></li>
<li><p>这里可以尝试尽量自定义设置属性； 比如，选中section部分，设置section header, footer， rows</p>

<p><img src="/images/2014-07-17-03.png" alt="summary" /></p></li>
<li>选择一个cell，进行一些简单的自定义（注意，这里每一个cell是互不影响，你可以单独设置每一个cell的具体属性）
<img src="/images/2014-07-17-04.png" alt="summary" /></li>
</ol>


<p>好了，VC1基本上就算完成了，你可以直接运行加载，你会发现，和我们预期的一样；</p>

<blockquote><p>PS1：如果我想让这个static cell上面的自定义按钮响应事件，或者支持编辑模式，怎么处理？ 其实这个和以前的处理方式一样：直接在对应的VC.m文件里，写上支持编辑模式的相关方法即可。 至于响应点击时间，我们直接通过IBOutlet关联事件方法就可以了。</p></blockquote>

<p>比如，我这里，对第一行cell的button关联了一个方法</p>

<p> <img src="/images/2014-07-17-05.png" alt="summary" /></p>

<blockquote><p>PS2: static cell仍然是可以自定义headerView和footerView的</p></blockquote>

<hr />

<h4>2. VC2 &ndash; 基于UITableViewController的prototype cell</h4>

<ol>
<li><p>我们先添加一个UItableViewController,然后选择prototype cell</p>

<p><img src="/images/2014-07-17-06.png" alt="summary" /></p></li>
<li><p>你会发现，你tableView上面cell，显示为prototype cells; 这里cell的数量，可以根据你的实际需要，进行添加或者减少；当然，每一行cell仍然可以完全自定义contentView； （我这里自定义了2个不同的cell，同时，<strong>需要分别设置不同的<code>reuse identifier</code></strong>）</p>

<p> <img src="/images/2014-07-17-07.png" alt="summary" />    <img src="/images/2014-07-17-08.png" alt="summary" /></p></li>
<li><p>然后，在对应的.m文件中，直接根据cell的reuse identifier即可；</p></li>
</ol>


<p>```
   &ndash; (UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{</p>

<pre><code>NSString *cellIdentifier;
if (indexPath.row!=[datasource count]-1) {
    cellIdentifier = @"prototypeCell_TableViewController";
}
else{
    cellIdentifier = @"cell2";
}
UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier forIndexPath:indexPath];

// Configure the cell
CellDataModel *cellData = [datasource objectAtIndex:indexPath.row];

if (indexPath.row!=[datasource count]) {
    UILabel *titleLabel = (UILabel *)[cell viewWithTag:Label_Tag];
    UIButton *buttonT = (UIButton *)[cell viewWithTag:Button_Tag];
    UISegmentedControl *segC = (UISegmentedControl *)[cell viewWithTag:SegmengControl_Tag];
    titleLabel.text = cellData.title;
    [buttonT setTitle:cellData.buttonTitle forState:UIControlStateNormal];
    [segC setSelectedSegmentIndex:cellData.selectedIndex];
}
else{
    cell.textLabel.text = cellData.title;
    cell.detailTextLabel.text = cellData.buttonTitle;
}

return cell;
</code></pre>

<p>}</p>

<p>```</p>

<hr />

<h4>然后运行，大概就是这个样子：</h4>

<p><img src="/images/2014-07-17-09.png" alt="summary" /></p>

<h4>3. VC3  &ndash; 基于UIViewController的prototype cell</h4>

<ol>
<li>基本和VC2类似，只是UITableViewController换成了UIViewController；</li>
<li>注意，这里tableview和navgationBarItem的所处层级不一样，这个注意一下；</li>
</ol>


<hr />

<p>基本笔记就是这些了。以后有了再慢慢更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Storyboard相关笔记]]></title>
    <link href="http://traximus.github.io/blog/2014/05/27/storyboardxiang-guan-bi-ji/"/>
    <updated>2014-05-27T19:08:52+08:00</updated>
    <id>http://traximus.github.io/blog/2014/05/27/storyboardxiang-guan-bi-ji</id>
    <content type="html"><![CDATA[<blockquote><h4>Storyboard出来这个么长时间了，我自己使用的却不是很多，也不够熟练，这里只是简单的记录一下相关笔记，主要是搞清楚segue，scene,以及他们之间的跳转关系，部分资料也是参考别人的整理。<!--more--></h4></blockquote>

<h5>首先简单看一下</h5>

<p><img src="/images/2014-05-27-01.png" alt="summary" /></p>

<p>一个<code>Storyboard</code>管理多个<code>VC</code>，这多个<code>VC</code>就看做是多个<code>scene</code>,视图之间的跳转关系定义都可以在<code>Storyboard</code>中完成。</p>

<hr />

<h2>segue类型介绍</h2>

<p>这里的简介转载自<a href="http://www.2cto.com/kf/201210/161737.html">http://www.2cto.com/kf/201210/161737.html</a></p>

<blockquote><p>在storyboard中，segue有几种不同的类型，且iPhone和iPad对应的segue也不尽相同；</p>

<p>在iPhone中，segue有push， modal，custom三种不同类型，这些segue定义了跳转时分别对应的方式；</p>

<p>在iPad中，segue有push， modal，replace, popover， custom五种方式；</p></blockquote>

<ul>
<li>modal 模态视图，弹出的模态视图，用户只能在该View上响应，不再使用，需要dismiss</li>
<li>push  配合导航栏NavigationController一起使用，从右侧划入的方式</li>
<li>popover 浮动窗视图，iPad专用；</li>
<li>replace  替换当前scene， iPad专用</li>
<li>custom  自定义跳转方式</li>
</ul>


<hr />

<h2>Storyboard的创建</h2>

<ol>
<li>可以直接使用项目默认的storyboard，也可以自己添加多个storyboard;</li>
<li><p>获取storyboard</p>

<p><code>+ (UIStoryboard *)storyboardWithName:(NSString *)name bundle:(NSBundle *)storyboardBundleOrNil</code></p></li>
<li><p>获取storyboard中的某个VC，然后对该VC进行相应的segue操作</p>

<p><code>- (id)instantiateInitialViewController;</code></p>

<p><code>- (id)instantiateViewControllerWithIdentifier:(NSString *)identifier;</code></p></li>
<li>一个VC在被触发跳转之间，会调用下面的方法，一般进行数据传递</li>
</ol>


<p>```</p>

<pre><code>// In a storyboard-based application,  do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    // used to transfer some data to new VC
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
</code></pre>

<p>```</p>

<ol>
<li>对于一个VC，可以使用下面的方法，来指定执行哪一个segue(如果该VC指定了多个segue)，或者查询segue是否可用</li>
</ol>


<p>```</p>

<pre><code>- (void)performSegueWithIdentifier:(NSString *)identifier sender:(id)sender

- (BOOL)shouldPerformSegueWithIdentifier:(NSString *)identifier sender:(id)sender 

// Invoked immediately prior to initiating a segue. Return NO to prevent the segue from firing.
// The default implementation returns YES. 
// This method is not invoked when -performSegueWithIdentifier:sender: is used.
</code></pre>

<p>```</p>

<ol>
<li>对于一个VC，可以指定segue类型为modal时的style</li>
</ol>


<p>```</p>

<pre><code>/*
Defines the transition style that will be used for this view controller when it is 
presented modally. Set this property on the view controller to be presented, not the presenter.
Defaults to UIModalTransitionStyleCoverVertical.
*/

@property(nonatomic,assign) UIModalTransitionStyle modalTransitionStyle NS_AVAILABLE_IOS(3_0);
@property(nonatomic,assign) UIModalPresentationStyle modalPresentationStyle NS_AVAILABLE_IOS(3_2);
</code></pre>

<p>```</p>

<pre><code>**UIModalTransitionStyle &amp;&amp; UIModalPresentationStyle 的定义为：**
</code></pre>

<p>```</p>

<pre><code>typedef NS_ENUM(NSInteger, UIModalTransitionStyle) {
    UIModalTransitionStyleCoverVertical = 0,
    UIModalTransitionStyleFlipHorizontal,
    UIModalTransitionStyleCrossDissolve,
    UIModalTransitionStylePartialCurl,
};

typedef NS_ENUM(NSInteger, UIModalPresentationStyle) {
    UIModalPresentationFullScreen = 0,
    UIModalPresentationPageSheet,
    UIModalPresentationFormSheet,
    UIModalPresentationCurrentContext,
    UIModalPresentationCustom,
    UIModalPresentationNone = -1,               
};
</code></pre>

<p>```</p>

<hr />

<h2>Storyboard的简单使用</h2>

<ol>
<li><p>一般情况下，一个storyboard至少管理者一个scene，对于VC之间的跳转segue可以直接从能触发的控件，
按住Control，然后连接到另一个你需要跳转的VC上，记住，你最好给segue设置一个identifier。</p></li>
<li><p>同时，你可以不指定segue，只给某一个VC指定一个Storyboard ID, 在使用的时候，直接调用下面的方法来获取VC</p>

<p> <code>- (id)instantiateViewControllerWithIdentifier:(NSString *)identifier;</code></p></li>
</ol>


<hr />
]]></content>
  </entry>
  
</feed>
