<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Traximus‘pages]]></title>
  <link href="http://traximus.github.io/atom.xml" rel="self"/>
  <link href="http://traximus.github.io/"/>
  <updated>2014-01-22T19:45:34+08:00</updated>
  <id>http://traximus.github.io/</id>
  <author>
    <name><![CDATA[traximus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS performance Tips&amp;Tricksks]]></title>
    <link href="http://traximus.github.io/blog/2014/01/21/ios-performance-tips-and-tricksks/"/>
    <updated>2014-01-21T11:09:33+08:00</updated>
    <id>http://traximus.github.io/blog/2014/01/21/ios-performance-tips-and-tricksks</id>
    <content type="html"><![CDATA[<blockquote><p>原文：<a href="http://www.raywenderlich.com/31166/25-ios-app-performance-tips-tricks">http://www.raywenderlich.com/31166/25-ios-app-performance-tips-tricks</a></p></blockquote>

<p>app拥有良好的性能非常重要，这是保证良好用户体验的基石。这篇文章是基于原文，我自己的备忘记录。<!--more--></p>

<hr />

<h2>1.ARC</h2>

<p>新项目现在一般都是基于ARC了，就算使用ARC，很多情况下，还是会有内存泄露的情况存在，所以使用instrument就很必要了。</p>

<p><strong>如何使用instrument：<a href="http://www.raywenderlich.com/23037/how-to-use-instruments-in-xcode">http://www.raywenderlich.com/23037/how-to-use-instruments-in-xcode</a></strong></p>

<hr />

<h2>2.Reuse</h2>

<h4>1)reuseidentifier</h4>

<ul>
<li>UITableViewCell</li>
<li>UICollectionViewCell</li>
<li>UITableViewHeaderFooterViews</li>
</ul>


<h4>2)Resue &amp;&amp; Lazy load</h4>

<p>学习UITableView的方式，不要一次性创建所有的subView,你只在需要的时候创建subView,并把它添加到reuse Queue;这可以避免大量的消耗。想啊次使用的时候，你只需要reuse即可。</p>

<h4>3)reuse Expensive object</h4>

<p>类似与NSDateFormatter, NSCalendar，这些object的初始化，设置效率比较低，代价比较大。针对这种情况，应该考虑重用。</p>

<p><strong>应对的做法有2种：</strong></p>

<ul>
<li>添加为class的变量，进行reuse</li>
<li>创建一个static variable</li>
</ul>


<p>对于第二种情况，你应该写一个类似与singleton的方法，来获取这个object</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(NSDateFormatter *)fotmatter
</span><span class='line'>{
</span><span class='line'>  static NSDateFormatter *formatter;
</span><span class='line'>  static dispatch_once_t onceToken;
</span><span class='line'>  dispatch_once(&onceToken, ^{
</span><span class='line'>      _formatter = [[NSDateFormatter alloc] init];
</span><span class='line'>      _formatter.dateFormat = @"EEE MMM dd HH:mm:ss Z yyyy";//twitter date format
</span><span class='line'>  });
</span><span class='line'>  
</span><span class='line'>  return formatter;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>3.set <code>opaque</code> to YES</h2>

<p>default</p>

<hr />

<h2>4.Avoid fat XIBs</h2>

<p>因为在XIB初始化的时候，会直接加载所有内容到内存中，增加大量的开销。因此，尽量把XIB拆分开，只在需要的时候在初始化并进行加载，这样就可以避免一次性加载国语复杂的xib所导致的内存和cpu过量消耗；</p>

<p>当然，现在很多项目使用stroyboard在一定程度上已经缓解了这个问题。</p>

<hr />

<h2>5.DO NOT block Main Thread</h2>

<ul>
<li>GCD</li>
<li>[NSURLConnection sendAsynchronousRequest: completionHandler:]</li>
</ul>


<hr />

<h2>6.<code>Size image</code> to imageVew&rsquo;s size</h2>

<p>事实上，将一个image放入到imageview中，并进行sizeToFit是有很大开销的,而且这部分开销可以避免；
当我们获取到image后，最好先进行resize,然后再放入到合适的imageView中；</p>

<hr />

<h2>7. Choose right data format and structure</h2>

<h4>1)choose <code>correct collection</code></h4>

<ul>
<li>NSArray：<strong>ordered</strong> list of values, <strong>Quick lookup</strong> by <strong>index</strong>, <strong>Slow lookup</strong> by <strong>value</strong>；<strong>Slow</strong> to insert&amp;delete</li>
<li>NSDictionary：key-value pairs, <strong>Quick lookup</strong> by <strong>key</strong></li>
<li>NSSet：unordered list of values, <strong>Quick lookup</strong>by <strong>value</strong>, <strong>Quick</strong> insert&amp;delete</li>
</ul>


<h4>2)choose <code>right data format</code></h4>

<ul>
<li>JSON &ndash; faster to parse, smaller than XML</li>
<li>XML &ndash; soap advantage</li>
</ul>


<h4>3)choose <code>corrent data storage option</code></h4>

<ul>
<li>NSUserDefaults    &ndash;   small data</li>
<li>XML,JSON,Plist    &ndash;   expensive operation to store and parse</li>
<li>NSCoding (archive)&ndash;   expensive as above</li>
<li>sqlite            &ndash;   easy to use</li>
<li>Core Data         &ndash;   like above</li>
</ul>


<hr />

<h2>8.enable GZIP compression</h2>

<hr />

<h2>9.cache</h2>

<p>对于不会变化，并且经常使用到的object进行cache; 对于http cache, 基本的第三方库都已经实现了cache; 对于一般的object，可以使用NSCache:<a href="http://nshipster.com/nscache/">http://nshipster.com/nscache/</a></p>

<hr />

<h2>10. Drawing performance</h2>

<p>考虑不同的绘图机制的性能</p>

<ul>
<li>UIKit</li>
<li>Core Animation</li>
<li>Core Graphics(相对于其他而言，更加高效)</li>
</ul>


<p>//绘制 Shadow Path</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//CoreAnimation - 这种方式代价高昂
</span><span class='line'>UIView *view= [[UIView alloc] init];
</span><span class='line'>view.layer.shadowOffst = CGSizeMake(-1.0, 1.0);
</span><span class='line'>view.layer.shadowRadius = 5.0;
</span><span class='line'>view.layer.shadowOpacity = 0.6;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//effective way
</span><span class='line'>view.layer.shadowPath = [[UIBezierPath bezierPathWithRect: view.bounds] CGPath];</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>11.处理Memory Warnings</h2>

<p>常见有3中方式接收到memory warning</p>

<ol>
<li>applicationDidReceiveMemoryWarning: appDelegate</li>
<li>didReceiveMemoryWarning：           UIViewController</li>
<li>UIApplicationDidReceiveMemoryWarningNotification：notificationCenter</li>
</ol>


<hr />

<h2>12.Avoid Re-Processing Data</h2>

<p>这主要是数据出库的逻辑需要规划好</p>

<hr />

<h2>13. background image</h2>

<ul>
<li>full size image &ndash; [UIImage imageNamed:@&ldquo;test.png&rdquo;];</li>
<li>pattern image &ndash; [UIColor colorWithPatternImage:[UIImage imageNamed:@&ldquo;test.png&rdquo;]];</li>
</ul>


<hr />

<h2>14.reduce your web footprint</h2>

<p>尽量减少javascript的使用</p>

<hr />

<h2>15.Optimize tableview</h2>

<ul>
<li>reuse cell</li>
<li>set subview opaque</li>
<li>avoid gradients, image scale, offscreen drawing</li>
<li>cache height if height is variable</li>
<li>use asynchronously method for cell&#8217; contents</li>
<li>use shadowPath to set shadow</li>
<li>reduce te number of subViews</li>
<li>do as little work possible in <code>cellForRowAtIndexPath:</code></li>
<li>use the appropriate data structure</li>
<li>use <code>rowHeight</code>, <code>sectionFooterHeight</code>,<code>sectionHeaderHeight</code> to set constant height instead of delegte(效率上能理解，设计上我自己暂时不是很理解这条)</li>
</ul>


<hr />

<h2>16.speed up Launch time</h2>

<p>注1：异步获取数据，延迟加载，避免臃肿的xib</p>

<p>注2：测试Launch time最有效的方式是，断开Xcode,单独运行你的app</p>

<hr />

<h2>17.image load</h2>

<ul>
<li>imageNamed:               &ndash;   首先从system cache里面查找该image，如果没有找到，再从文件加载image</li>
<li>imageWithContentsOfFile:  &ndash;   直接从文件加载image,不检查system cache</li>
</ul>


<p>注意：对于会多次使用到的image，选择imageNamed：更加合适，因为system cache会进行cache; 而对于单次使用的image，直接从文件加载的imageWithContentsOfFile:更加合适</p>

<hr />

<p>上面的知识点只是针对我个人做备忘，每一个人对此的理解不一样，因此建议看看原文。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中实现设备摇动检测]]></title>
    <link href="http://traximus.github.io/blog/2014/01/20/ioszhong-shi-xian-she-bei-yao-dong-jian-ce/"/>
    <updated>2014-01-20T15:01:09+08:00</updated>
    <id>http://traximus.github.io/blog/2014/01/20/ioszhong-shi-xian-she-bei-yao-dong-jian-ce</id>
    <content type="html"><![CDATA[<p>要检测iOS设备的摇动事件，网上有一些资料。我自己测试过的是下面这2种方式(其实算作一种，只是第二种方式可以在vc里面直接控制是否响应shake事件)<!--more--></p>

<ol>
<li>UIWndow</li>
<li>UIViewController(继承自UIResponder)</li>
</ol>


<hr />

<h3>1.UIWindow</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(void) motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event
</span><span class='line'>{
</span><span class='line'>  //开始
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(void) motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)event
</span><span class='line'>{
</span><span class='line'>  if (motion == UIEventSubtypeMotionShake)
</span><span class='line'>  {
</span><span class='line'>      //触发结束
</span><span class='line'>      //
</span><span class='line'>      //这里可以促发系统震动，或者发送一个通知，进行相应的处理
</span><span class='line'>      //
</span><span class='line'>      //例子： 添加系统震动
</span><span class='line'>      //  AudioToolBox.framework
</span><span class='line'>      //  #import&lt;AudioToolbox/AudioToolbox.h&gt;
</span><span class='line'>      //  AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(void) motionCancelled:(UIEventSubtype)motion withEvent:(UIEvent *)event
</span><span class='line'>{
</span><span class='line'>  //取消
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>2.UIViewController</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#pragma mark - 
</span><span class='line'>#pragma mark - viewController methods
</span><span class='line'>
</span><span class='line'>-(BOOL) canBecomeFirstResponder
</span><span class='line'>{
</span><span class='line'>  //这里设定一个变量，来控制是否支持shake事件
</span><span class='line'>  return self.shakeDetectionOn;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(void) viewDidAppear:(BOOL)animated
</span><span class='line'>{
</span><span class='line'>  [super viewDidAppear:animated];
</span><span class='line'>  
</span><span class='line'>  if ([self canBecomeFirstResponder])
</span><span class='line'>  {
</span><span class='line'>      //下面这行代码，也可以写到viewDidLoad或者applicationDidFinishLaunch中
</span><span class='line'>      [[UIApplication sharedApplication] setApplicationSupportShakeToEdit:YES];
</span><span class='line'>      
</span><span class='line'>      [self becomFirstResponder];
</span><span class='line'>  }
</span><span class='line'>  else
</span><span class='line'>  {
</span><span class='line'>      NSLog(@"NOT supported");
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#pragma mark -
</span><span class='line'>#pragma mark - UIResponder support motion
</span><span class='line'>
</span><span class='line'>-(void) motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event
</span><span class='line'>{
</span><span class='line'>  NSLog(@"======== shake begins ==========");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(void) motionCancelled:(UIEventSybtype)motion withEvent:(UIEvent *)event
</span><span class='line'>{
</span><span class='line'>  NSLog(@"======== shake cancelled ==========");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(void) motionEnd：（UIEventSubtype)motion withEvent:(UIEvent *)event
</span><span class='line'>{
</span><span class='line'>  if (motion == UIEventSubtypeMotionShake)
</span><span class='line'>  {
</span><span class='line'>      NSLog(@"======== shake ended ========");
</span><span class='line'>      //这里可以添加震动反馈，或者发送notification
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>======</p>

<h4>说实话，在实际应用中，很少有合适的场景会用到这个事件；</h4>

<p>而且上面的方式检测shake事件，我自己测试的时候，发现响应有一点延迟，肯定可以再改进；
找机会再慢慢研究一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP交互用到的MIME-Type对照]]></title>
    <link href="http://traximus.github.io/blog/2014/01/20/httpjiao-hu-yong-dao-de-mime-typedui-zhao/"/>
    <updated>2014-01-20T14:28:06+08:00</updated>
    <id>http://traximus.github.io/blog/2014/01/20/httpjiao-hu-yong-dao-de-mime-typedui-zhao</id>
    <content type="html"><![CDATA[<p>这是我自己的app中，需要解析xml文档，然后针对不同类型的文件，进行相应的操作。所以必须知道文件对应的mime-type（http返回的xml文档中有相应的描述）；<!--more--></p>

<hr />

<p><strong>下面是我自己根据wiki和测试后得到的数据，作为备忘：</strong></p>

<p><strong>音频 &ndash; Audio</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.mp3     audio/mpeg
</span><span class='line'>.aac      audio/x-aac
</span><span class='line'>.m4a      audio/mp4a-latm
</span><span class='line'>.aiff     audio/x-aiff
</span><span class='line'>.wav      audio/x-wav</span></code></pre></td></tr></table></div></figure>


<p><strong>视频 &ndash; Video</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.mov     video/quicktime
</span><span class='line'>.mp4      video/mp4
</span><span class='line'>.3gp      video/3gpp
</span><span class='line'>.m4v      video/x-m4v</span></code></pre></td></tr></table></div></figure>


<p><strong>图片 &ndash; Image</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.tiff        image/tiff
</span><span class='line'>.tif      image/tiff
</span><span class='line'>.jpg      image/jpeg
</span><span class='line'>.jpeg     image/jpeg
</span><span class='line'>.gif      image/gif
</span><span class='line'>.png      image/png
</span><span class='line'>.bmp      image/bmp
</span><span class='line'>.bmpf     image/bmp
</span><span class='line'>.ico      image/x-icon
</span><span class='line'>/xbm      image/x-bitmap</span></code></pre></td></tr></table></div></figure>


<p><strong>其他 &ndash; Other</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.pdf     application/pdf
</span><span class='line'>.txt      text/plain
</span><span class='line'>.zip      application/zip
</span><span class='line'>.tar      application/tar
</span><span class='line'>.rar      application/rar</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAC下配置WebDAV服务器]]></title>
    <link href="http://traximus.github.io/blog/2014/01/15/macxia-pei-zhi-webdavfu-wu-qi/"/>
    <updated>2014-01-15T12:16:56+08:00</updated>
    <id>http://traximus.github.io/blog/2014/01/15/macxia-pei-zhi-webdavfu-wu-qi</id>
    <content type="html"><![CDATA[<hr />

<p><strong>PS1：这是之前我做NAS项目时的WebDAV部分资料，既然弄了这个新的blog，就搬过来了。</strong><!--more--></p>

<p><strong>PS2: 当时没有相关服务器，也找不到人来做，网上针对MAC系统搭建WebDAV服务器的资料也很少。源地址<a href="http://gigaom2.wordpress.com/2010/10/01/how-to-enable-webdav-on-your-mac-for-iwork-on-ipad/">http://gigaom2.wordpress.com/2010/10/01/how-to-enable-webdav-on-your-mac-for-iwork-on-ipad/</a> 原文针对iPad,我经过一定修改，在自己的lion上搭建成功。</strong></p>

<p><strong>PS3: 由于OS X 10.8以后好像没有“web共享“入口了(我自己是10.9没有该入口)所以先需要在终端中开启。</strong></p>

<hr />

<h1>什么是WebDAV?</h1>

<p>参见：<a href="http://baike.baidu.com/view/974023.htm">http://baike.baidu.com/view/974023.htm</a></p>

<blockquote><p>webDAV也就是“基于网络的分布式创作和版本控制协议”，他是HTTP协议的扩展. webDAV被用于对web服务器进行读写访问，而且每一台mac都自带了一个web server;</p>

<p>当你在系统设置中，打开“web共享”时，就已经运行了一个Apache web server; 虽然webDAV内置于mac系统中，但是在OS X中却没有默认开启；你需要使用管理员权限来开启webDAV配置。</p></blockquote>

<hr />

<h1>10.7.5以后没有“web共享”入口的解决办法</h1>

<h4>1.开启apache</h4>

<p>打开safari，输入<code>http://localhost</code>测试，如果显示 it works! 说明apache已经开启；否则，在终端中输入： <strong>sudo apachectl restart</strong></p>

<h4>2.这时用户根目录<code>http://localhost/~username</code>还不能访问，为了让<code>~/Sites</code>下面的内容可以访问，继续以下的几个步骤</h4>

<ol>
<li><p>查看username.conf文件是否存在</p>

<p><code>
ls /etc/apache2/users/
</code></p></li>
<li><p>若你的用户名.conf文件不存在，则需要手动建立一个</p>

<p><code>
cd /etc/apache2/users/
</code></p>

<p><code>
sodo vi username.conf
</code>
<strong>注：username是你的mac用户名</strong></p></li>
<li>粘贴以下内容到username.conf,注意把username替换为你自己的用户名</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   　 &lt;Directory "/Users/username/Sites/"&gt;
</span><span class='line'>
</span><span class='line'>　　　　Options Indexes MultiViews
</span><span class='line'>
</span><span class='line'>　　　　AllowOverride All
</span><span class='line'>
</span><span class='line'>　　　　Order allow,deny
</span><span class='line'>
</span><span class='line'>　　　　Allow from all　　
</span><span class='line'>
</span><span class='line'>　　　　&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<p> 保存，退出，重启apache: sudo apachectl restart</p>

<p> <strong>接下来，现在就可以开始正式配置WebDAV服务器了</strong></p>

<p>============</p>

<h1>开始搭建WebDAV服务器</h1>

<h3>1.关闭web server(或者直接关闭apache server)</h3>

<p><img src="http://traximus.github.io/images/2014-01-16-01.jpeg" alt="turn off icon" /></p>

<h3>2.修改Apache Web Server配置文件</h3>

<p>打开launchpad,打开终端<strong>terminal</strong>
注意，需要权限的时候，输入你的管理员密码，或者提前修改httpd.conf文件的读写权限；</p>

<ul>
<li>转到etc文件夹：<code>cd /etc/apache2</code></li>
<li>编辑httpd.conf: <code>sudo vi httpd.conf</code></li>
<li>寻找到这一行<code>“Include/private/etc/apache2/extra/httpd-dav.conf”</code> 取消注释，也就是去掉这一行前面的#</li>
<li>wq保存，退出</li>
</ul>


<h3>3.修改WebDAV模块的配置文件</h3>

<p>到现在位置，WebDAV模块已经被打开了，这样下次apache Web Server启动的时候，就会自己寻找启动WebDAV模块的指令。</p>

<ul>
<li>打开终端，转到extra文件夹：<code>cd etc/apache2/extra</code></li>
<li>编辑httpd-dav.conf文件： <code>sudo vi http-dav.conf</code></li>
<li>使用下面的配置，取代已经存在的alias项和文件夹配置</li>
</ul>


<p><img src="http://traximus.github.io/images/2014-01-16-02.jpeg" alt="httpd-dav image" /></p>

<h3>4.创建WebDAV用户</h3>

<p>在第三步中，我们制定了一个密码文件<strong> /usr/webdav.passwd </strong> 他就是用于<strong>WebDAV</strong>模块验证用户的登陆验证；同时，我们制定了一个用户<strong>myMacMini</strong>；</p>

<p>所以，我们需要创建一个用户 <strong>myMacMini</strong></p>

<ul>
<li>打开终端，转到extra文件夹：  <code>cd /etx/apache2/extra</code></li>
<li>创建新的WebDAV用户名 <strong>myMacMini</strong> :  <code>sudo htpasswd -c /usr/webdav.passwd myMacMini</code></li>
</ul>


<h3>5.创建对应的WebDAV文件夹，并设定相应的权限</h3>

<p>在第三步的配置中，我们也设定了WebDAV文件夹的位置 <strong>、Library/WebServer/WebDAV</strong>；</p>

<p>所以，我们需要创建相应的文件夹路径：</p>

<ul>
<li>打开终端，转到extra文件夹： <code>cd /etc/apache2/extra</code></li>
<li>创建WebDAV文件夹:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkdir -p /Library/WebServer/WebDAV
</span><span class='line'>sudo mkdir -p /usr/var</span></code></pre></td></tr></table></div></figure>


<ul>
<li>设置适当的权限(也可以根据自己的需要，到相应的目录去设定权限)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chown -R www:www /Library/WebServer/WebDAV
</span><span class='line'>sudo chown -R www:www /usr/var
</span><span class='line'>sudo chgrp www /usr/webdav.passwd</span></code></pre></td></tr></table></div></figure>


<h4>设置完成，重启apache server: <code>sudo apachectl restart</code></h4>

<hr />

<h4>OK,现在你可以尝试用一个WebDAV客户端，去连接你的WebDAV服务器，看看是不是能够正常查看和分享文件了？</h4>

<ul>
<li>服务器地址： <code>http://你的ip地址/webdav/</code></li>
<li>用户名   ： <code>你刚才设定的id （我们刚才设置的是myMacMini）</code></li>
<li>密码    ：  <code>你在创建过程中设置的密码</code></li>
</ul>


<p>附：完整的路径位置</p>

<p><img src="http://traximus.github.io/images/2014-01-16-03.jpeg" alt="completePath image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Markdown]]></title>
    <link href="http://traximus.github.io/blog/2014/01/10/test-markdown/"/>
    <updated>2014-01-10T15:43:39+08:00</updated>
    <id>http://traximus.github.io/blog/2014/01/10/test-markdown</id>
    <content type="html"><![CDATA[<h1>Markdown Test</h1>

<blockquote><p>title &ndash; #</p></blockquote>

<p><img src="http://traximus.github.io/images/tx.png" alt="markdown icon" /><!--more--></p>

<blockquote><p>image &ndash; (image path)</p></blockquote>

<h2>Overview</h2>

<blockquote><p>overview title &ndash; ##</p></blockquote>

<p><strong>markdown</strong>, is so intresting.</p>

<blockquote><p>bold &ndash; **in the front of content, and anthoer 2 in the end</p></blockquote>

<h4>section1</h4>

<blockquote><p>section &ndash; ####</p></blockquote>

<h5>test table</h5>

<table>
<thead>
<tr>
<th></th>
<th>ddd1     </th>
<th>   ddd2   </th>
<th> ddd3    </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> content1</td>
<td> content2 </td>
<td>content3 |</td>
</tr>
<tr>
<td></td>
<td> cc      </td>
<td>    dd    </td>
<td> fff     |</td>
</tr>
</tbody>
</table>


<h4>section2</h4>

<ol>
<li>this is a test line</li>
<li>this is a test line</li>
<li>this is a test line</li>
</ol>


<h4>section3</h4>

<ul>
<li>this is line1</li>
<li>this is line2</li>
<li>this is line3</li>
</ul>


<h4>contact info</h4>

<p><a href="https://traximus.github.io">https://traximus.github.io</a></p>

<p><a href="https://github.com/traximus">@traximus</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello world]]></title>
    <link href="http://traximus.github.io/blog/2014/01/10/hello-world/"/>
    <updated>2014-01-10T15:09:18+08:00</updated>
    <id>http://traximus.github.io/blog/2014/01/10/hello-world</id>
    <content type="html"><![CDATA[<p>not an easy way to achieve this. f</p>
]]></content>
  </entry>
  
</feed>
